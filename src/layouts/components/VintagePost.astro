---
import {getLangFromUrl, getTranslations} from "../../lib/utils/languageParser";
import {ContentEntryMap} from "astro:content";

const { bookTitle, author, hashTag, chapterTitle, image,
  intro, main,
  commentBeforeVerse, commentAfterVerse,
  commentBeforeVerseExtra, commentAfterVerseExtra,

  longVerse,

  verseOriginal, verseExtraOriginal,
  verse, verseExtra,

  hasMultiParagraph,
  multiParagraph,

} = Astro.props;

const lang = getLangFromUrl(Astro.url);
const {
  introduction, main_case, poem_original, poem_translated, comment,
  } = await getTranslations(lang as keyof ContentEntryMap);
---

<script>
  let handleTextAnimation = (texts, observer) => {
    texts.forEach(text => {
      if (text.isIntersecting) {
        text.target.classList.add('visible');
      }
      else {
        text.target.classList.remove('visible');
      }
    });
  };

  const texts = document.querySelectorAll("p, .storyImage, h1, h2");

  texts.forEach(text => {
    let textObserver = new IntersectionObserver(handleTextAnimation);
    textObserver.observe(text);
  })
</script>

<article id="story" class="story">
  {
    bookTitle
      ?  <header class="story__header" style={`background-image: url(${image})`}>
        <h1 class="story__title"> {bookTitle}
          <span class="story__byline">{author}</span>
        </h1>
      </header>
      : ''
  }

  <section class="chapter">
    {
      chapterTitle
        ? <header class="chapter__header">
          <h2 class="chapter__title" id={hashTag}>{chapterTitle}</h2>
        </header>
        : ''
    }

    <div class="chapter__contents">
      <div class="two-column">
            {
            intro?.split(' / ').length
             ? intro?.split(' / ')?.map(line => <p>{line}</p>)
          : intro
}

{
           image ? <span class="storyImage" style={`background-image: url(${image})`}></span> : ''
}
    </div>
    
      {
        main
         ? <h4>{main_case}</h4>
          : ''
      }
      {
        main?.split(' / ').length
         ? main?.split(' / ').map(line => <p>{line}</p>)
          : main
      }

      {
        hasMultiParagraph && multiParagraph?.length
         ? multiParagraph?.map(paragraph => paragraph.includes(' / ')
             ? paragraph?.split(' / ').map(line => <p>{line}</p>)
              : <p>{paragraph}</p>
          )
          : null
      }

      {
        commentBeforeVerseExtra
         ? <h4>{comment}</h4>
          : ''
      }
      {
        commentBeforeVerseExtra?.split(' / ').length
         ? commentBeforeVerseExtra?.split(' / ').map(comment => <p>{comment}</p>)
          : commentBeforeVerseExtra
      }

      {
        verseExtraOriginal
         ? <hr/>
          <h4>{poem_original}</h4>
          : ''
      }
      {
        verseExtraOriginal?.split(' / ').length
         ? verseExtraOriginal?.split(' / ').map(line => <p>{line}</p>)
          : ''
      }

      {
        verseExtra
         ? <hr/>
          <h4>{poem_translated}</h4>
          : ''
      }
      {
        verseExtra?.split(' / ').length
         ? verseExtra?.split(' / ').map(line => <p>{line}</p>)
          : ''
      }

      {
        commentAfterVerseExtra
           ? <h4>{comment}</h4>
            : ''
      }
      {
        commentAfterVerseExtra?.split(' / ').length
           ? commentAfterVerseExtra?.split(' / ').map(comment => <p>{comment}</p>)
            : commentAfterVerseExtra
      }

      {
        commentBeforeVerse
         ? <h4>{comment}</h4>
          : ''
      }
      {
        commentBeforeVerse?.split(' / ').length
         ? commentBeforeVerse?.split(' / ').map(comment => <p>{comment}</p>)
          : commentBeforeVerse
      }

      {
        verseOriginal
         ? <hr/>
          <h4>{poem_original}</h4>
          : ''
      }
      {
        verseOriginal?.split(' / ').length
         ? verseOriginal?.split(' / ').map(line => <p>{line}</p>)
          : ''
      }

      {
        verse
         ? <hr/>
          <h4>{poem_translated}</h4>
          : ''
      }
      {
        verse?.split(' / ').length
         ? verse?.split(' / ').map(line => <p>{line}</p>)
          : ''
      }

      {
        commentAfterVerse
         ? <h4>{comment}</h4>
          : ''
      }
      {
        commentAfterVerse?.split(' / ').length
         ? commentAfterVerse?.split(' / ').map(comment => <p>{comment}</p>)
          : commentAfterVerse
      }

      {
        longVerse?.split(' / ').length
         ? longVerse?.split(' / ')?.map(line => <p>{line}</p>)
          : ''
      }

      <p class="chapter__end">⚡️</p>
    </div>
  </section>
</article>

<style>
  :root {
    --red: #5d0c08;
    --newRed: red;
    --mq: 768px;
  }

  html,
  body {
    font-family: 'IM Fell French Canon', serif;
    scroll-behavior: smooth;
    letter-spacing: 1px;
    /*background-image: url("https://assets.codepen.io/618359/paper.jpg");*/
    background-size: contain;
  }

  .story {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }

  .story__header {
    display: flex;
    width: 100%;
    height: 740px;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background-size: cover;
    background-repeat: no-repeat;
  }

  .story__title {
    font-size: 70px;
    text-transform: uppercase;
    color: var(--newRed);
  }

  .story__title:first-letter {
    font-size: 113px;
    float: left;
    line-height: 0.75;
  }

  @media (min-width: var(--mq)) {
    .story__title {
      font-size: 124px;
    }
    .story__title:first-letter {
      font-size: 200px;
    }
  }

  .story__byline {
    display: block;
    font-size: 18px;
    text-transform: initial;
    margin-left: 112px;
    font-style: italic;
  }

  @media (min-width: var(--mq)) {
    .story__byline {
      margin-left: 156px;
      font-size: 32px;
    }
  }

  .chapter__header {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    padding: 40px 0;
  }

  .chapter__title {
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    font-size: 36px;
    text-align: center;
    color: var(--newRed);
  }

  .chapter__title:before,
  .chapter__title:after {
    content: "";
    width: 50px;
    height: 2px;
    margin: 0 10px;
    background-color: var(--newRed);
    transition: all 1s ease-in-out;
    transform: scaleX(0.0);
    opacity: 0;
  }

  .chapter__title:before {
    transform-origin: right;
  }

  .chapter__title:after {
    transform-origin: left;
  }

  .chapter__title.visible:before,
  .chapter__title.visible:after {
    transform: scaleX(1);
    opacity: 1;
  }

  .chapter__contents {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 20px;
  }

  .chapter__end {
    font-size: 64px;
    color: var(--red);
    text-align: center;
    font-weight: bold;
  }

  .two-column {
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: 1fr 1fr;
  }

  .two-column:nth-child(1),
  .two-column:nth-child(2) {
    height: 100%;
  }

  @media (min-width: var(--mq)) {
    .two-column {
      grid-template-columns: 1fr 1fr;
      grid-template-rows: 1fr;
    }
  }

  p {
    max-width: 600px;
    padding-top: 30px;
    font-size: 20px;
    line-height: 1.5;
    transform: translateY(20px);
    opacity: 0;
    transition: all 0.6s ease;
  }

  p:first-of-type:first-letter {
    font-size: 200%;
    font-weight: bold;
    color: var(--red);
  }

  p.visible {
    transform: translateY(0);
    opacity: 1;
  }

  .storyImage {
    display: block;
    background-repeat: no-repeat;
    background-position: 0 0;
    //background-size: 9600px 216px;
  }

  .storyImage.visible {
    animation: animateImage 1.1s steps(24) forwards;
    animation-delay: 1s;
  }

  @media (min-width: var(--mq)) {
    .storyImage {
      //background-size: 16000px 360px;
    }
  }

  @keyframes animateImage {
    from {
      background-position: 0 50%;
      opacity: 0.5;
    }
    to {
      background-position: 100% 50%;
      opacity: 1;
    }
  }

</style>
